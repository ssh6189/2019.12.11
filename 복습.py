#반복문
#횟수
for 변수 in Range(start:end:stepby):
    반복수행문장

for 변수 in 시퀀스자료형(리스트, 튜플, 딕셔너리, 문자열):
    반복수행 문장

for key, value in dict.items(): #앞에 변수 Key값, Value값 2개
    반복수행문장

#조건
while
반복 수행 문장

else:반복문이 중단없이 정상적으로 종료된 후에 한번 더 추가적으로 실행해야 할 코드는


#형식을 보자면
while 조건:
    반복수행문장
[else:
 수행문장]

break : 내부에서 어떤 조건을 만족했을때 반복 수행을 중단할 때
continue : 반복문 내부에서 어떤 조건을 만족했을때 반복 수행 코드를 실행하지 않고 다음 반복회차로 넘길 때

포맷형식을 출력하기 위해서 python지원 기능
1.%operator
2."{ } { } { }".format(값1, 값2, 값3)
다음과같이 지정도 가능 "{1} {2} {0:2d%}"
3. f-string 3.6버전부터 지원
   f-string f " { } { } { }"

#함수 - 어떤 기능을 수행하는 코드들의 묶음
1.재사용
2.구현 용이(설계 용이)
3.변경 용이(유지 보수 관리 용이)

def 함수명(매개변수(0개이상)):
    수행문장1
    수행문장2

    return 값(변수. 표현식, 여러개의 값반환시는 시퀀스형자료형(리스트, 튜플, 딕셔너리))

#함수에서 return을 생략하면, None에 해당하는게 리턴된다.

함수 이름(인수(0개이상))

#함수 호출할 때 인수 전달 방법 2가지
1.call by value - 값이 복사 되어 전달
2.call by reference - 주소값이 전달

def move(a, b):
    return a+b

x = 10
y = 10

move(x, y)



del change1(x, y):
    temp = x
    x = y
    y = temp

x = 10
y = 100
change1(x, y)

print(x) #10
print(y) #100



def change2(x, y):
    temp = x[0]
    x[0] = y[0]
    y[0] = temp

x = 10
y = 100
change2(x, y)

print(x) #10
print(y) #100

#주소값은 전달되었지만, 함수 내부에서만 변환되므로, 함수를 빠져나오면, garbage collection으로 간다.

#변수 scope

전역변수:전역 메모리에 생성되는 변수, 어디에서나 참조가 가능하다.
로컬변수:함수의 블락 안에서 선언되는 변수, 생성된 블럭내부에서만 참조 가능
블럭 내부에서 전역 변수와 동일한 이름의 변수를 사용하더라도, 충돌이 발생하지 않는다.
(전역변수와 로컬변수의 타입이 다르다.)

블럭 내부에서 전역변수에 저장된 값을 변경하려면, global과 함께 사용한다.

파이썬 함수의 매개변수 종류
함수 호출시에 인수 전달 기본 방식은 위치 기반(positional parameter)(인수 전달 순서 중요)
키워드 매개변수 : named parameter 방식, 함수 선언된 매개변수 이름과 함께 값을 전달하는 방식, 순서무관
가변매개변수 : 인수의 개수가 가변적, *매개변수, 다른 인수와 사용할때 함께 선언될경우 마지막에 선언
               함수 내부에서 가변 매개변수는 튜플로 생성된다.

디폴트매개변수 : 매개변수의 초기값을 함께 선언, 함수 호출시에 인수를 생략하면, 매개변수의 초기값이 사용됩니다.
키워드 가변매개변수 : 인수의 개수가 가변적, **매개변수, 다른 인수와 함께 선언되 경우 마지막에 선언
                      함수 내부에서 키워드 가변 매개변수 딕셔너리로 다룰수 있다.



문자열 - 시퀀스 자료형
len, count(), upper(), lower()

f = open("파일 경로이름", "r","w","a")
#파일핸들러

readlines()는 리스트 객체를 리턴, 리스트 객체의 요소는 한행 단위의 문자열이 저장
반드시 f.close()


